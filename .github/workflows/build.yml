name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install PostgreSQL 17 and dependencies
      run: |
        sudo apt-get install -y wget ca-certificates
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
        echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" | sudo tee /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          postgresql-17 \
          postgresql-server-dev-17 \
          libgeos-dev \
          libproj-dev \
          libjson-c-dev \
          libsfcgal-dev \
          libxml2-dev \
          wget
        
    - name: Fetch and build dependencies
      run: |
        ./fetch-dependencies.sh
        
    - name: Build extension
      run: |
        make clean
        make
        
    - name: Install extension
      run: |
        sudo make install
        
    - name: Install test dependencies
      run: |
        pip install pglite
        
    - name: Verify test data
      run: |
        # Test data (test.gol) is already in the repository
        ls -lh test/data/
        if [ ! -f test/data/test.gol ]; then
          echo "Error: test/data/test.gol not found!"
          exit 1
        fi
        
    - name: Setup test database with pglite
      run: |
        # Initialize pglite database
        pglite init --pgdata /tmp/pgdata --pgversion 17
        pglite start --pgdata /tmp/pgdata
        pglite status --pgdata /tmp/pgdata
        
        # Create test database
        pglite psql --pgdata /tmp/pgdata -c "CREATE DATABASE test_db;"
        
        # Install PostGIS (required for geometry type)
        pglite psql --pgdata /tmp/pgdata -d test_db -c "CREATE EXTENSION IF NOT EXISTS postgis;"
        
    - name: Run tests
      run: |
        # Set absolute path for test data
        export TEST_DATA_PATH="$GITHUB_WORKSPACE/test/data/test.gol"
        echo "Test data path: $TEST_DATA_PATH"
        
        # Run basic tests with absolute path
        pglite psql --pgdata /tmp/pgdata -d test_db -v test_data_path="'$TEST_DATA_PATH'" -f test/basic_test.sql
        
    - name: Cleanup
      if: always()
      run: |
        pglite stop --pgdata /tmp/pgdata || true